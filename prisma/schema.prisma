datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model Color {
  id        Int    @id @default(autoincrement()) @map("color_id")
  colorName String
  Item      Item?  @relation(fields: [itemId], references: [id])
  itemId    Int?
}

model Size {
  id       Int    @id @default(autoincrement()) @map("size_id")
  sizeName String
  Item     Item?  @relation(fields: [itemId], references: [id])
  itemId   Int?
}

model Category {
  id           Int    @id @default(autoincrement()) @map("category_id")
  categoryName String
  Item         Item?  @relation(fields: [itemId], references: [id])
  itemId       Int?
}

model Review {
  id      Int    @id @default(autoincrement()) @map("review_id")
  name    String
  email   String
  comment String
  rating  Int
  Item    Item?  @relation(fields: [itemId], references: [id])
  itemId  Int?
}

model Item {
  id         Int        @id @default(autoincrement()) @map("item_id")
  price      Int
  image      String
  addingDate DateTime
  avgRating  Float
  colors     Color[]
  sizes      Size[]
  reviews    Review[]
  Category   Category[]
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  role          UserRole?       @default(ADMIN)
  items         Item[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
